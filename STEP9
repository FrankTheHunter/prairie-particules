import "./style.css";

const canvas = document.querySelector<HTMLCanvasElement>("#particules-canvas")!;
const ctx = canvas.getContext("2d")!;
const width = (canvas.width = window.innerWidth);
const height = (canvas.height = window.innerHeight);

const maxPointsPerCluster = 10;
const minPointsPerCluster = 5;
const maxSpeed = 10;
const maxPointSize = 20;
const minPointSize = 2;

const trailLength = 10;
const trailAlphaDecay = 0.03;

const gravity = 0.2; // Force de gravité
const friction = 0.98; // Coefficient de frottement
const bounceFactor = 0.7; // Facteur de rebond en cas de collision avec le sol

canvas.addEventListener("click", handleCanvasClick);

function generateRandomPoint(x: number, y: number) {
    const numPoints = Math.floor(Math.random() * (maxPointsPerCluster - minPointsPerCluster + 1)) + minPointsPerCluster;
    for (let i = 0; i < numPoints; i++) {
        const angle = Math.random() * 2 * Math.PI;
        const speed = Math.random() * maxSpeed;
        const size = Math.random() * (maxPointSize - minPointSize) + minPointSize;
        const color = getRandomColor();

        const point = {
            x: x,
            y: y,
            dx: Math.cos(angle) * speed,
            dy: Math.sin(angle) * speed,
            size: size,
            color: color,
            alpha: 1.0,
            trail: [],
        };

        points.push(point);
    }
}

function getRandomColor() {
    const letters = "0123456789ABCDEF";
    let color = "#";
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

function drawPoint(point: { x: number; y: number; size: number; color: string; alpha: number; trail: number[][] }) {
    for (let i = 0; i < point.trail.length; i++) {
        const trailPosition = point.trail[i];
        const trailAlpha = point.alpha - i * trailAlphaDecay;
        if (trailAlpha <= 0) {
            break;
        }

        const red = parseInt(point.color.slice(1, 3), 16);
        const green = parseInt(point.color.slice(3, 5), 16);
        const blue = parseInt(point.color.slice(5, 7), 16);

        ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${trailAlpha})`;
        ctx.beginPath();
        ctx.arc(trailPosition[0], trailPosition[1], point.size, 0, 2 * Math.PI);
        ctx.fill();
    }

    const red = parseInt(point.color.slice(1, 3), 16);
    const green = parseInt(point.color.slice(3, 5), 16);
    const blue = parseInt(point.color.slice(5, 7), 16);

    ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${point.alpha})`;
    ctx.beginPath();
    ctx.arc(point.x, point.y, point.size, 0, 2 * Math.PI);
    ctx.fill();
}

function animatePoints() {
    ctx.clearRect(0, 0, width, height);
    ctx.fillStyle = "#000000";
    ctx.fillRect(0, 0, width, height);

    for (let i = 0; i < points.length; i++) {
        const point = points[i];
        point.trail.push([point.x, point.y]);

        if (point.trail.length > trailLength) {
            point.trail.shift();
        }

        // Appliquer la gravité
        point.dy += gravity;

        // Appliquer la friction
        point.dx *= friction;
        point.dy *= friction;

        point.x += point.dx;
        point.y += point.dy;

        // Réduire progressivement l'opacité
        point.alpha -= 0.005;

        // Gestion des collisions avec le sol
        if (point.y + point.size > height) {
            point.y = height - point.size;
            point.dy *= -bounceFactor;
        }

        drawPoint(point);

        if (point.alpha <= 0) {
            points.splice(i, 1);
            i--;
        }
    }

    requestAnimationFrame(animatePoints);
}

const points: {
    x: number;
    y: number;
    dx: number;
    dy: number;
    size: number;
    color: string;
    alpha: number;
    trail: number[][];
}[] = [];

function handleCanvasClick(event: MouseEvent) {
    const mouseX = event.clientX - canvas.getBoundingClientRect().left;
    const mouseY = event.clientY - canvas.getBoundingClientRect().top;
    generateRandomPoint(mouseX, mouseY);
}

animatePoints();
