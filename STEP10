import "./style.css";

const canvas = document.querySelector<HTMLCanvasElement>("#particules-canvas")!;
const ctx = canvas.getContext("2d")!;
const width = (canvas.width = window.innerWidth);
const height = (canvas.height = window.innerHeight);

const maxPointsPerCluster = 10;
const minPointsPerCluster = 5;
const maxSpeed = 20;
const maxPointSize = 20;
const minPointSize = 2;

const trailLength = 10;
const trailAlphaDecay = 0.03;

const gravity = 0.2; // Force de gravité
const friction = 0.98; // Coefficient de frottement
const bounceFactor = 2; // Facteur de rebond en cas de collision avec le sol

canvas.addEventListener("click", handleCanvasClick);

function generateRandomPoint(x: number, y: number) {
    const numPoints = Math.floor(Math.random() * (maxPointsPerCluster - minPointsPerCluster + 1)) + minPointsPerCluster;
    for (let i = 0; i < numPoints; i++) {
        const angle = Math.random() * 2 * Math.PI;
        const speed = Math.random() * maxSpeed;
        const size = Math.random() * (maxPointSize - minPointSize) + minPointSize;
        const color = getRandomColor();

        const point = {
            x,
            y,
            dx: Math.cos(angle) * speed,
            dy: Math.sin(angle) * speed,
            size,
            color,
            alpha: 1.0,
            trail: [],
        };

        points.push(point);
    }
}

function getRandomColor() {
    const letters = "0123456789ABCDEF";
    let color = "#";
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

function drawPoint(point: { x: number; y: number; size: number; color: string; alpha: number; trail: number[][] }) {
    const { x, y, size, color, alpha, trail } = point;

    for (let i = 0; i < trail.length; i++) {
        const [trailX, trailY] = trail[i];
        const trailAlpha = alpha - i * trailAlphaDecay;
        if (trailAlpha <= 0) {
            continue;
        }

        ctx.beginPath();
        ctx.arc(trailX, trailY, size, 0, Math.PI * 2);
        ctx.fillStyle = color;
        ctx.globalAlpha = trailAlpha;
        ctx.shadowBlur = 50; // Augmentez cette valeur pour augmenter l'effet de flou
        ctx.shadowColor = color;
        ctx.fill();
    }
}

const points: {
    x: number;
    y: number;
    dx: number;
    dy: number;
    size: number;
    color: string;
    alpha: number;
    trail: number[][];
}[] = [];

function handleCanvasClick(event: MouseEvent) {
    const mouseX = event.clientX - canvas.getBoundingClientRect().left;
    const mouseY = event.clientY - canvas.getBoundingClientRect().top;
    generateRandomPoint(mouseX, mouseY);
}

function detectCollisions() {
    for (let i = 0; i < points.length; i++) {
        const pointA = points[i];

        for (let j = i + 1; j < points.length; j++) {
            const pointB = points[j];
            const dx = pointB.x - pointA.x;
            const dy = pointB.y - pointA.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            // Si la distance entre les deux particules est inférieure à la somme de leurs rayons (collision détectée)
            if (distance < pointA.size + pointB.size) {
                // Calculer la direction de la collision
                const angle = Math.atan2(dy, dx);
                const sine = Math.sin(angle);
                const cosine = Math.cos(angle);

                // Calculer les nouvelles vitesses après la collision (conservation de la quantité de mouvement)
                const v1x = pointA.dx * cosine + pointA.dy * sine;
                const v1y = pointA.dy * cosine - pointA.dx * sine;
                const v2x = pointB.dx * cosine + pointB.dy * sine;
                const v2y = pointB.dy * cosine - pointB.dx * sine;

                // Calculer les nouvelles vitesses après la collision
                const newV1x = ((pointA.size - pointB.size) * v1x + 2 * pointB.size * v2x) / (pointA.size + pointB.size);
                const newV1y = v1y;
                const newV2x = ((pointB.size - pointA.size) * v2x + 2 * pointA.size * v1x) / (pointA.size + pointB.size);
                const newV2y = v2y;

                // Mettre à jour les vitesses des particules après la collision
                pointA.dx = newV1x;
                pointA.dy = newV1y;
                pointB.dx = newV2x;
                pointB.dy = newV2y;

                // Changer la couleur des particules en collision
                pointA.color = getRandomColor();
                pointB.color = getRandomColor();
            }
        }
    }
}

function animatePoints() {
    // Remplir le fond d'écran en noir
    ctx.fillStyle = "#000000";
    ctx.shadowBlur = 0;
    ctx.fillRect(0, 0, width, height);

    for (let i = 0; i < points.length; i++) {
        const point = points[i];
        point.trail.push([point.x, point.y]);

        if (point.trail.length > trailLength) {
            point.trail.shift();
        }

        // Appliquer la gravité
        point.dy += gravity;

        // Appliquer la friction
        point.dx *= friction;
        point.dy *= friction;

        point.x += point.dx;
        point.y += point.dy;

        // Gestion des collisions avec le sol
        if (point.y + point.size > height) {
            point.y = height - point.size;
            point.dy *= -bounceFactor;
        }

        detectCollisions(); // Détecter les collisions entre les particules

        drawPoint(point);

        if (point.alpha <= 0) {
            points.splice(i, 1);
            i--;
        }
    }

    requestAnimationFrame(animatePoints);
}

animatePoints();
