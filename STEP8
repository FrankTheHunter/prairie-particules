import "./style.css"; // Importe une feuille de style CSS

const canvas = document.querySelector<HTMLCanvasElement>("#particules-canvas")!; // Sélectionne le canvas HTML avec l'ID "particules-canvas"
const ctx = canvas.getContext("2d")!; // Obtient le contexte de rendu 2D du canvas

const width = (canvas.width = window.innerWidth); // Définit la largeur du canvas sur la largeur de la fenêtre
const height = (canvas.height = window.innerHeight); // Définit la hauteur du canvas sur la hauteur de la fenêtre

// Définit les paramètres pour la génération des particules
const maxPointsPerCluster = 10; // Nombre maximum de particules par cluster
const minPointsPerCluster = 5; // Nombre minimum de particules par cluster
const maxSpeed = 10; // Vitesse maximale des particules
const maxPointSize = 20; // Taille maximale des particules
const minPointSize = 2; // Taille minimale des particules

const trailLength = 10; // Longueur de la traînée
const trailAlphaDecay = 0.03; // Taux de décroissance de l'opacité de la traînée par itération

canvas.addEventListener("click", handleCanvasClick); // Ajoute un écouteur d'événements pour détecter les clics sur le canvas

const points: { x: number; y: number; dx: number; dy: number; size: number; color: string; alpha: number; trail: number[][] }[] = []; // Tableau pour stocker les particules

function generateRandomPoint(x: number, y: number) {
    const numPoints = Math.floor(Math.random() * (maxPointsPerCluster - minPointsPerCluster + 1)) + minPointsPerCluster; // Génère un nombre aléatoire de particules pour ce cluster
    for (let i = 0; i < numPoints; i++) {
        const angle = Math.random() * 2 * Math.PI; // Angle aléatoire en radians
        const speed = Math.random() * maxSpeed; // Vitesse aléatoire
        const size = Math.random() * (maxPointSize - minPointSize) + minPointSize; // Taille aléatoire
        const color = getRandomColor(); // Couleur aléatoire

        const point = {
            x: x,
            y: y,
            dx: Math.cos(angle) * speed, // Composante en x de la vitesse
            dy: Math.sin(angle) * speed, // Composante en y de la vitesse
            size: size,
            color: color,
            alpha: 1.0, // Opacité initiale à 100%
            trail: [], // Tableau pour stocker les anciennes positions
        };

        points.push(point); // Ajoute la particule au tableau
    }
}

function getRandomColor() {
    const letters = "0123456789ABCDEF";
    let color = "#";
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)]; // Génère une couleur hexadécimale aléatoire
    }
    return color;
}

function drawPoint(point: { x: number; y: number; size: number; color: string; alpha: number; trail: number[][] }) {
    // Dessiner la traînée
    for (let i = 0; i < point.trail.length; i++) {
        const trailPosition = point.trail[i];
        const trailAlpha = point.alpha - i * trailAlphaDecay;
        if (trailAlpha <= 0) {
            break;
        }

        const red = parseInt(point.color.slice(1, 3), 16);
        const green = parseInt(point.color.slice(3, 5), 16);
        const blue = parseInt(point.color.slice(5, 7), 16);

        ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${trailAlpha})`;
        ctx.beginPath();
        ctx.arc(trailPosition[0], trailPosition[1], point.size, 0, 2 * Math.PI);
        ctx.fill();
    }

    // Dessiner le point principal
    const red = parseInt(point.color.slice(1, 3), 16);
    const green = parseInt(point.color.slice(3, 5), 16);
    const blue = parseInt(point.color.slice(5, 7), 16);

    ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${point.alpha})`;
    ctx.beginPath();
    ctx.arc(point.x, point.y, point.size, 0, 2 * Math.PI);
    ctx.fill();
}

function animatePoints() {
    ctx.clearRect(0, 0, width, height); // Efface le canvas en le remplissant de blanc
    ctx.fillStyle = "#000000"; // Définit la couleur de remplissage en noir
    ctx.fillRect(0, 0, width, height); // Remplit le canvas en noir

    for (let i = 0; i < points.length; i++) {
        const point = points[i];
        point.trail.push([point.x, point.y]); // Stocker la position actuelle dans la traînée

        // Réduire progressivement l'opacité de la traînée
        if (point.trail.length > trailLength) {
            point.trail.shift();
        }

        point.x += point.dx;
        point.y += point.dy;

        // Réduire progressivement l'opacité du point
        point.alpha -= 0.009; // Vous pouvez ajuster ce chiffre pour changer la vitesse de disparition

        // Supprimer le point s'il est trop transparent
        if (point.alpha <= 0) {
            points.splice(i, 1);
            i--;
        }

        drawPoint(point);
    }

    requestAnimationFrame(animatePoints); // Appelle récursivement la fonction d'animation pour créer une animation continue
}

function handleCanvasClick(event: MouseEvent) {
    const mouseX = event.clientX - canvas.getBoundingClientRect().left; // Obtient la position X du clic relativement au canvas
    const mouseY = event.clientY - canvas.getBoundingClientRect().top; // Obtient la position Y du clic relativement au canvas
    generateRandomPoint(mouseX, mouseY); // Génère un cluster de particules à la position du clic
}

animatePoints(); // Lance l'animation des particules
