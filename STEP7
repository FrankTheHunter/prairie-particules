import "./style.css"; // Importe une feuille de style CSS

const canvas = document.querySelector<HTMLCanvasElement>("#particules-canvas")!; // Sélectionne le canvas HTML avec l'ID "particules-canvas"
const ctx = canvas.getContext("2d")!; // Obtient le contexte de rendu 2D du canvas

const width = (canvas.width = window.innerWidth); // Définit la largeur du canvas sur la largeur de la fenêtre
const height = (canvas.height = window.innerHeight); // Définit la hauteur du canvas sur la hauteur de la fenêtre

// Définit les paramètres pour la génération des particules
const maxPointsPerCluster = 10; // Nombre maximum de particules par cluster
const minPointsPerCluster = 5; // Nombre minimum de particules par cluster
const maxSpeed = 10; // Vitesse maximale des particules
const maxPointSize = 20; // Taille maximale des particules
const minPointSize = 2; // Taille minimale des particules

canvas.addEventListener("click", handleCanvasClick); // Ajoute un écouteur d'événements pour détecter les clics sur le canvas

const points: { x: number; y: number; dx: number; dy: number; size: number; color: string }[] = []; // Tableau pour stocker les particules

function generateRandomPoint(x: number, y: number) {
    const numPoints = Math.floor(Math.random() * (maxPointsPerCluster - minPointsPerCluster + 1)) + minPointsPerCluster; // Génère un nombre aléatoire de particules pour ce cluster
    for (let i = 0; i < numPoints; i++) {
        const angle = Math.random() * 2 * Math.PI; // Angle aléatoire en radians
        const speed = Math.random() * maxSpeed; // Vitesse aléatoire
        const size = Math.random() * (maxPointSize - minPointSize) + minPointSize; // Taille aléatoire
        const color = getRandomColor(); // Couleur aléatoire

        const point = {
            x: x,
            y: y,
            dx: Math.cos(angle) * speed, // Composante en x de la vitesse
            dy: Math.sin(angle) * speed, // Composante en y de la vitesse
            size: size,
            color: color,
        };

        points.push(point); // Ajoute la particule au tableau
    }
}

function getRandomColor() {
    const letters = "0123456789ABCDEF";
    let color = "#";
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)]; // Génère une couleur hexadécimale aléatoire
    }
    return color;
}

function drawPoint(point: { x: number; y: number; size: number; color: string }) {
    ctx.fillStyle = point.color; // Définit la couleur de remplissage pour la particule
    ctx.beginPath();
    ctx.arc(point.x, point.y, point.size, 0, 2 * Math.PI); // Dessine un cercle
    ctx.fill(); // Remplit le cercle avec la couleur de remplissage
}

function animatePoints() {
    ctx.clearRect(0, 0, width, height); // Efface le canvas en le remplissant de blanc
    ctx.fillStyle = "#000000"; // Définit la couleur de remplissage en noir
    ctx.fillRect(0, 0, width, height); // Remplit le canvas en noir

    for (let i = 0; i < points.length; i++) {
        const point = points[i];
        point.x += point.dx; // Met à jour la position en x de la particule en fonction de sa vitesse
        point.y += point.dy; // Met à jour la position en y de la particule en fonction de sa vitesse
        drawPoint(point); // Dessine la particule

        // Vérifie si la particule sort du canvas et la supprime si nécessaire
        if (point.x < 0 || point.x > width || point.y < 0 || point.y > height) {
            points.splice(i, 1); // Supprime la particule du tableau
            i--; // Décrémente la variable de boucle pour ne pas sauter la particule suivante
        }
    }

    requestAnimationFrame(animatePoints); // Appelle récursivement la fonction d'animation pour créer une animation continue
}

function handleCanvasClick(event: MouseEvent) {
    const mouseX = event.clientX - canvas.getBoundingClientRect().left; // Obtient la position X du clic relativement au canvas
    const mouseY = event.clientY - canvas.getBoundingClientRect().top; // Obtient la position Y du clic relativement au canvas
    generateRandomPoint(mouseX, mouseY); // Génère un cluster de particules à la position du clic
}

animatePoints(); // Lance l'animation des particules
